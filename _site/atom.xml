<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Fabio Souto</title>
 <link href="http://fsouto.github.com/atom.xml" rel="self"/>
 <link href="http://fsouto.github.com"/>
 <updated>2012-05-16T16:23:31+02:00</updated>
 <id>http://fsouto.github.com</id>
 <author>
   <name>Fabio Souto</name>
   <email>fsoutomoure@gmail.com</email>
 </author>

 
 <entry>
   <title>New site</title>
   <link href="http://fsouto.github.com/2012/05/new-site"/>
   <updated>2012-05-15T00:00:00+02:00</updated>
   <id>http://fsouto.github.com/2012/05/new-site</id>
   <content type="html">&lt;p&gt;I had this site a little bit abandoned, so I decided to rewrite it one more time. This time I opted for a simpler design but the biggest change is that I decided to abandon &lt;a href='https://www.djangoproject.com/'&gt;Django&lt;/a&gt; and create an static site.&lt;/p&gt;

&lt;p&gt;Static sites can be hosted it on github pages, so I can save some MBs in the hosting. It&amp;#8217;s easy to publish new content, just make a commit to the forge. Also this site don&amp;#8217;t need 90% of the functionality offered by Django, I was using a sledgehammer to crack nuts.&lt;/p&gt;

&lt;p&gt;But of course I didn&amp;#8217;t create the HTML files from scratch, I use &lt;a href='http://jekyllrb.com/'&gt;Jekyll&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id='jekyll'&gt;Jekyll?&lt;/h3&gt;

&lt;p&gt;Jekyll is a static site generator developed in Ruby. It has support for markdown and integration with github pages. With the help of &lt;a href='http://jekyllbootstrap.com/'&gt;Jekyll bootstrap&lt;/a&gt; I was able to create the new version in a couple of hours.&lt;/p&gt;

&lt;p&gt;Jekyll it&amp;#8217;s really simple, just run &lt;code&gt;jekyll --serve&lt;/code&gt; in your project folder and it will parse the markdown and create the site. The generated site will be in the &lt;code&gt;_site&lt;/code&gt; folder. Serve this folder with your static HTTP server (Nginx, Apache&amp;#8230;) and enjoy.&lt;/p&gt;

&lt;p&gt;&lt;a href='https://github.com/lakshmivyas/hyde'&gt;Hyde&lt;/a&gt; is a similar project in Python, and it was my first option. I installed the new version but the documentation is really poor(at the time I&amp;#8217;m writing). Then I decide to install the old version but I found &lt;a href='https://github.com/lakshmivyas/hyde/issues/54'&gt;this bug&lt;/a&gt;. I realize I was spending too much time for such a simple task, time to abandon Hyde and embrace Jekyll.&lt;/p&gt;

&lt;h3 id='design'&gt;Design&lt;/h3&gt;

&lt;p&gt;I&amp;#8217;m not a designer, fortunately I had twitter bootstrap and google fonts to help me to create a readable design. I want to create long articles, so readability it&amp;#8217;s an important point. I try many fonts but one day I discover &lt;a href='http://stevelosh.com/'&gt;Steve Losh&lt;/a&gt; site, I shameless copy his font selection.&lt;/p&gt;

&lt;h3 id='show_me_the_code'&gt;Show me the code&lt;/h3&gt;

&lt;p&gt;The code &lt;a href='https://github.com/fsouto/fsouto.github.com'&gt;is available on Github&lt;/a&gt;, feel free to check it and make suggestions.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>The ultimate website checklist</title>
   <link href="http://fsouto.github.com/2012/05/the-ultimate-website-checklist"/>
   <updated>2012-05-14T00:00:00+02:00</updated>
   <id>http://fsouto.github.com/2012/05/the-ultimate-website-checklist</id>
   <content type="html">&lt;p&gt;This is a document that I&amp;#8217;ve been updating during 4+ years. It&amp;#8217;s just a list of things to check before launch a web project. Obviously It&amp;#8217;s not mandatory to meet all the requirements for all the projects, I use it as a reference and it help me to reinforce good practices. Feel free to make suggestions.&lt;/p&gt;

&lt;h2 id='accesibility'&gt;Accesibility&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Images with alt text&lt;/li&gt;

&lt;li&gt;Check with different resolutions&lt;/li&gt;

&lt;li&gt;Check with Internet explorer&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='social'&gt;Social&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Opengraph tags&lt;/li&gt;

&lt;li&gt;Social buttons&lt;/li&gt;

&lt;li&gt;Social button integration with google analytics&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='monitor'&gt;Monitor&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Server monitoring&lt;/li&gt;

&lt;li&gt;Setup analytics&lt;/li&gt;

&lt;li&gt;Setup Feedburner&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='seo'&gt;SEO&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Redirect http://www to http://&lt;/li&gt;

&lt;li&gt;Check meta tags&lt;/li&gt;

&lt;li&gt;Create list of keywords&lt;/li&gt;

&lt;li&gt;Opengraph&lt;/li&gt;

&lt;li&gt;Page titles with keywords&lt;/li&gt;

&lt;li&gt;Sitemap.xml&lt;/li&gt;

&lt;li&gt;Check url structure&lt;/li&gt;

&lt;li&gt;Submit to search engines&lt;/li&gt;

&lt;li&gt;Robots.txt&lt;/li&gt;

&lt;li&gt;Build some backlinks&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='technical'&gt;Technical&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;404 page&lt;/li&gt;

&lt;li&gt;500 page&lt;/li&gt;

&lt;li&gt;Set backups&lt;/li&gt;

&lt;li&gt;Stop verbose error reporting&lt;/li&gt;

&lt;li&gt;Ensure semantical content&lt;/li&gt;

&lt;li&gt;Security test&lt;/li&gt;

&lt;li&gt;Ensure all test are passing&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='load_time'&gt;Load time&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Load test (blitz.io)&lt;/li&gt;

&lt;li&gt;Compress/minimize js/css&lt;/li&gt;

&lt;li&gt;Serve gzip&lt;/li&gt;

&lt;li&gt;Optimize images&lt;/li&gt;

&lt;li&gt;Caching&lt;/li&gt;

&lt;li&gt;Check indexes in the database&lt;/li&gt;

&lt;li&gt;Use CDN&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='standards'&gt;Standards&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Accesibility validation&lt;/li&gt;

&lt;li&gt;HTML validation&lt;/li&gt;

&lt;li&gt;JS validation&lt;/li&gt;

&lt;li&gt;CSS validation&lt;/li&gt;

&lt;li&gt;Opensearch&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='design'&gt;Design&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Adequate text-to-background contrast&lt;/li&gt;

&lt;li&gt;Readability&lt;/li&gt;

&lt;li&gt;Navigation is easy to identify&lt;/li&gt;

&lt;li&gt;Favicon&lt;/li&gt;

&lt;li&gt;Apple icons&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Introduction to Hadoop</title>
   <link href="http://fsouto.github.com/2012/05/introduction-to-hadoop"/>
   <updated>2012-05-14T00:00:00+02:00</updated>
   <id>http://fsouto.github.com/2012/05/introduction-to-hadoop</id>
   <content type="html">&lt;h2 id='what_is_hadoop'&gt;What is Hadoop?&lt;/h2&gt;

&lt;p&gt;Hadoop is a framework to create data intensive applications. It was created by Doug Cutting inspired by the MapReduce and GFS papers.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Django tips and tricks</title>
   <link href="http://fsouto.github.com/2012/05/django-tips-and-tricks"/>
   <updated>2012-05-14T00:00:00+02:00</updated>
   <id>http://fsouto.github.com/2012/05/django-tips-and-tricks</id>
   <content type="html">&lt;p&gt;Django es un framework tremendamente poderoso, durante estos 4+ años he aprendido algunos trucos que comparto aqui.&lt;/p&gt;

&lt;p&gt;This is an ongoing document, I will continue updating it as long as I learn new tricks. Si tienes alguna sugerencia, o ves algo que esta mal, por favor dimelo.&lt;/p&gt;

&lt;h2 id='usa_vagrant'&gt;Usa Vagrant&lt;/h2&gt;

&lt;p&gt;Normalmente desarrollaba mis paginas en local contra virtualenv y luego hacia el deployment a una instancia de EC2. Crei que era la mejor manera de desarrollar hasta que descubri Vagrant.&lt;/p&gt;

&lt;h3 id='vagrant'&gt;Vagrant?&lt;/h3&gt;

&lt;p&gt;Vagrant es una herramienta para manejar maquinas virtuales VirtualBox. Nada más. La gran ventaja de desarrollar con Vagrant es que estas ejecutando tu codigo contra la misma configuración que vas a usar en producción.&lt;/p&gt;

&lt;p&gt;Además instalar algunos paquetes (si PIL y Pscycopg2 os miro a vosotros) en OSX no es tarea fácil, con Vagrant es tan sencillo como hacer un apt-get.&lt;/p&gt;

&lt;p&gt;Vagrant tiene integracion con Chef y Puppet out-of-the-box, esta es otra gran ventaja.&lt;/p&gt;

&lt;h2 id='settings_management'&gt;Settings management&lt;/h2&gt;

&lt;p&gt;It&amp;#8217;s always a good idea to have different files for local and production settings to avoid override it with a version control system. What I do it&amp;#8217;s to create a &lt;code&gt;local_settings.py&lt;/code&gt; file and add it to &lt;code&gt;.gitignore&lt;/code&gt; to keep it out of version control and at the end of &lt;code&gt;settings.py&lt;/code&gt; I add:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='python'&gt;&lt;span class='k'&gt;try&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
   &lt;span class='kn'&gt;from&lt;/span&gt; &lt;span class='nn'&gt;local_settings&lt;/span&gt; &lt;span class='kn'&gt;import&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;
&lt;span class='k'&gt;except&lt;/span&gt; &lt;span class='ne'&gt;ImportError&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='n'&gt;e&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt;
   &lt;span class='k'&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Override what you need in &lt;code&gt;local_settings.py&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id='fabric'&gt;Fabric&lt;/h2&gt;

&lt;h2 id='usa_gunicorn__nginx'&gt;Usa gunicorn + nginx&lt;/h2&gt;

&lt;h3 id='green_unicorn_aka_gunicorn'&gt;Green Unicorn aka gunicorn&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://gunicorn.org/'&gt;Gunicorn&lt;/a&gt; es sencillo&lt;/li&gt;

&lt;li&gt;&lt;a href='http://gunicorn.org/'&gt;Gunicorn&lt;/a&gt; es ligero&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Que más se le puede pedir a un servidor. Aqui un &lt;a href='http://senko.net/en/django-nginx-gunicorn/'&gt;buen articulo de como configurarlos&lt;/a&gt; ademas la documentación oficial de Django también incluye una &lt;a href='https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/gunicorn/'&gt;seccion para integrar con Gunicorn&lt;/a&gt;&lt;/p&gt;

&lt;h3 id='nginx'&gt;Nginx&lt;/h3&gt;

&lt;p&gt;&lt;a href='http://nginx.org/en/'&gt;Nginx&lt;/a&gt; (pronounced &amp;#8220;engine-ex&amp;#8221;) is a good choice para usarlo como reverse proxy. Nginx tiene una base de usuarios muy activa y esta bajo active development.&lt;/p&gt;

&lt;h2 id='usa_south'&gt;Usa South&lt;/h2&gt;

&lt;p&gt;Using South in Django is a no brainer. Actually South must be in Django core. Usually your data model change over time, South let you define migrations, a way to mutate your database schema from one version into another.&lt;/p&gt;

&lt;p&gt;The &lt;a href='http://south.aeracode.org/docs/tutorial/index.html'&gt;South tutorial&lt;/a&gt; is pretty good.&lt;/p&gt;

&lt;h2 id='use_managers'&gt;Use managers&lt;/h2&gt;

&lt;p&gt;A manager is the interface to query the models. Managers will increase DRY and increase the abstraction level.&lt;/p&gt;

&lt;p&gt;But please before do any manager &lt;a href='http://dabapps.com/blog/higher-level-query-api-django-orm/'&gt;read this article from dabapps&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='soporte_con_sublime_text_2'&gt;Soporte con sublime text 2&lt;/h2&gt;

&lt;p&gt;Durante una larga temporada estuve usando Vim para programar. Al principio fue algo dificil pero al cabo del tiempo te acostumbras y la memoria muscular hace su efecto, tecleas sin pensar. Hasta que descubri Sublime Text 2. Desde entonces toooodo me parece más lento. Vim esta bien, pero requiere un largo aprendizaje y mucha configuración para ponerlo a tu gusto. En una hora con sublime text customize el entorno a mi gusto, instale plugins y aprendi la mitad de los comandos. Además tiene el modo vintage que habilita las key bindings de Vim.&lt;/p&gt;</content>
 </entry>
 
 
</feed>